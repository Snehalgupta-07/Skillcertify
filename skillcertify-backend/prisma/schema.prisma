// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  firebaseUid String     @unique
  role      Role         @default(RECIPIENT)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  issuedCertificates    Certificate[]          @relation("IssuerCerts")
  receivedCertificates  Certificate[]          @relation("RecipientCerts")
  templates             CertificationTemplate[]
  auditLogs             AuditLog[]
  emailLogs EmailLog[] @relation("UserEmailLogs") // ✅ Named relation

}

enum Role {
  ISSUER
  RECIPIENT
}

model Certificate {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  issuerId    Int
  recipientId Int
  templateId  Int
  issuedAt    DateTime  @default(now())
  validUntil  DateTime?
  certUrl     String?
  verifyHash  String     @unique
  status      CertificateStatus @default(ISSUED)

  issuer      User                 @relation("IssuerCerts", fields: [issuerId], references: [id])
  recipient   User                 @relation("RecipientCerts", fields: [recipientId], references: [id])
  template    CertificationTemplate @relation(fields: [templateId], references: [id])
  qrCode      QRCode?
  shareLinks  ShareLink[]
  emailLogs   EmailLog[]
}

enum CertificateStatus {
  ISSUED
  VIEWED
  DOWNLOADED
}

model CertificationTemplate {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  htmlContent String       // for preview generation
  issuerId    Int
  createdAt   DateTime     @default(now())

  issuer       User          @relation(fields: [issuerId], references: [id])
  certificates Certificate[]
}

model QRCode {
  id            Int        @id @default(autoincrement())
  certificateId Int        @unique
  qrData        String

  certificate Certificate @relation(fields: [certificateId], references: [id])
}

model ShareLink {
  id         Int      @id @default(autoincrement())
  certId     Int
  token      String   @unique
  expiresAt  DateTime?
  createdAt  DateTime @default(now())

  certificate Certificate @relation(fields: [certId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String
  userId    Int
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model EmailLog {
  id          Int      @id @default(autoincrement())
  certId      Int
  recipient   String
  status      EmailStatus
  attempts    Int      @default(0)
  lastTriedAt DateTime @default(now())
  userId      Int

  certificate Certificate @relation(fields: [certId], references: [id])
  user        User        @relation("UserEmailLogs", fields: [userId], references: [id]) // ✅ Opposite side of named relation
}


enum EmailStatus {
  SENT
  FAILED
  PENDING
}




